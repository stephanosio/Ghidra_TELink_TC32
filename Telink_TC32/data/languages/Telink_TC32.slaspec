#
# Telink TC32
#
# Telink microcontroller 16-bit CPU


# Memory architecture
define endian=little;
define alignment=2;  # TODO: Verify. See 4.2 "Alignment Definition."
define space RAM type=ram_space size=2 default;
define space register type=register_space size=2;


# Registers
define register offset=0x0000 size=2 [
  r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 sp lr pc
  # TODO: Status registers?
];

define register offset=0x1000 size=4 [
  flags # FIXME why must be 32-bits?
];


# Map of fields within the instruction that we will use during instruction
# decoding.
#
# Field names follow a *_<offset>_<numbits> convention.
define token instr(16)
  # These are derived from the masks and values used by tc32-elf-objdump.exe
  # to identify instructions
  op_0_16 = (0, 15)
  op_11_5 = (11, 15)
  op_12_4 = (12, 15)
  op_3_13 = (3, 15)
  op_6_10 = (6, 15)
  op_7_9 = (7, 15)
  op_8_8 = (8, 15)
  op_9_1 = (9, 9)
  op_9_2 = (9, 10)
  op_9_7 = (9, 15)

  # Condition for the conditional tj instruction
  cond_imm_8_4 = (8, 11)
  
  # Conditionally turns tstorer into tstorerb
  flag_10_1 = (10, 10)
  
  # Conditionally turns tloadr into tloadrb
  flag_11_1 = (11, 11)
  
  # Immediate operands
  imm_0_7 = (0, 6) dec
  imm_0_8 = (0, 7) dec
  imm_6_3 = (6, 8) dec
  imm_6_5 = (6, 10)
  
  # Register operands
  reg_0_3 = (0, 2)
  reg_3_3 = (3, 5)
  reg_6_3 = (6, 8)
  reg_8_3 = (8, 10)
  
  # "Hi" register operands can reference higher registers if a flag bit is set.
  # These overlap with reg_0_3 and reg_3_3 but are attached to different names.
  hi_reg_lower_0_3 = (0, 2)
  hi_reg_lower_3_3 = (3, 5)
  hi_reg_upper_6_1 = (6, 6)
  hi_reg_upper_7_1 = (7, 7)
  
  # Displacements from $pc for the tj instruction
  displacement_0_11 = (0, 10) signed
  displacement_0_8 = (0, 7) signed
;


# Immediates that are multiplied by a constant
imm_0_7_x4: value is imm_0_7 [ value = imm_0_7 * 4; ] { }
imm_0_8_x4: value is imm_0_8 [ value = imm_0_8 * 4; ] { }
imm_6_5_x2: value is imm_6_5 [ value = imm_6_5 * 2; ] { }
imm_6_5_x4: value is imm_6_5 [ value = imm_6_5 * 4; ] { }

# "Hi" registers
hi_reg_6_1_and_3_3: hi_reg_lower_3_3 is hi_reg_upper_6_1 = 1 & hi_reg_lower_3_3 { }
hi_reg_6_1_and_3_3: reg_3_3 is hi_reg_upper_6_1 = 0 & reg_3_3 { }
hi_reg_7_1_and_0_3: hi_reg_lower_0_3 is hi_reg_upper_7_1 = 1 & hi_reg_lower_0_3 { }
hi_reg_7_1_and_0_3: reg_0_3 is hi_reg_upper_7_1 = 0 & reg_0_3 { }

# Right shifts of zero are interpreted as right shifts of 32
right_shift_imm_6_5: 32 is imm_6_5=0 { }
right_shift_imm_6_5: imm_6_5 is imm_6_5 { }


# Map operands that encode register numbers to the actual registers.
#
# However, note that some instructions (those using %D or %S in objdump) split
# their register number across non-contiguous bits, so when the upper bit is
# one, we use the lower bits to map to a different set of registers.
#
# See 6.3.1 "Attaching Registers."
attach variables
  [ reg_0_3 reg_3_3 reg_6_3 reg_8_3 ]
  [ r0 r1 r2 r3 r4 r5 r6 r7 ]
;
attach variables
  [ hi_reg_lower_0_3 hi_reg_lower_3_3 ]
  [ r8 r9 r10 r11 r12 sp lr pc  ]
;


# Map the condition operand for the conditional TJ instruction.
attach names
  [ cond_imm_8_4 ]
  [ eq ne cs cc mi pl vs vc hi ls ge lt gt le al _ ]
;


# tadd%C %0-2r, %3-5r, #%6-8d
:tadds reg_0_3, reg_3_3, #imm_6_3 is op_9_7=0x0076 & reg_0_3 & reg_3_3 & imm_6_3
{
}

# tadd%C %0-2r, %3-5r, %6-8r
:tadds reg_0_3, reg_3_3, reg_6_3 is op_9_7=0x0074 & reg_0_3 & reg_3_3 & reg_6_3
{
}

# tadd%C %8-10r, #%0-7d
:tadds reg_8_3, #imm_0_8 is op_11_5=0x0016 & reg_8_3 & imm_0_8
{
}

# tadd%c %8-10r, pc, #%0-7W
:tadd reg_8_3, pc, #imm_0_8_x4 is op_11_5=0x000e & reg_8_3 & pc & imm_0_8_x4
{
}

# tadd%c %8-10r, sp, #%0-7W
:tadd reg_8_3, sp, #imm_0_8_x4 is op_11_5=0x000f & reg_8_3 & sp & imm_0_8_x4
{
}

# tadd%c %D, %S
:tadd hi_reg_7_1_and_0_3, hi_reg_6_1_and_3_3 is op_8_8=0x0004 & hi_reg_7_1_and_0_3 & hi_reg_6_1_and_3_3
{
}

# tadd%c sp, #%0-6W
:tadd sp, #imm_0_7_x4 is op_7_9=0x00c0 & sp & imm_0_7_x4
{
}

# taddc%C %0-2r, %3-5r
:taddcs reg_0_3, reg_3_3 is op_6_10=0x0005 & reg_0_3 & reg_3_3
{
}

# tand%C %0-2r, %3-5r
:tands reg_0_3, reg_3_3 is op_6_10=0x0000 & reg_0_3 & reg_3_3
{
}

# tasr%C %0-2r, %3-5r
:tasrs reg_0_3, reg_3_3 is op_6_10=0x0004 & reg_0_3 & reg_3_3
{
}

# tasr%C %0-2r, %3-5r, %s
:tasrs reg_0_3, reg_3_3, right_shift_imm_6_5 is op_11_5=0x001c & reg_0_3 & reg_3_3 & right_shift_imm_6_5
{
}

# tbclr%C %0-2r, %3-5r
:tbclrs reg_0_3, reg_3_3 is op_6_10=0x000e & reg_0_3 & reg_3_3
{
}

# tcmp%c %0-2r, %3-5r
:tcmp reg_0_3, reg_3_3 is op_6_10=0x000a & reg_0_3 & reg_3_3
{
}

# tcmp%c %8-10r, #%0-7d
:tcmp reg_8_3, #imm_0_8 is op_11_5=0x0015 & reg_8_3 & imm_0_8
{
}

# tcmp%c %D, %S
:tcmp hi_reg_7_1_and_0_3, hi_reg_6_1_and_3_3 is op_8_8=0x0005 & hi_reg_7_1_and_0_3 & hi_reg_6_1_and_3_3
{
}

# tcmpn%c %0-2r, %3-5r
:tcmpn reg_0_3, reg_3_3 is op_6_10=0x000b & reg_0_3 & reg_3_3
{
}

# tj%8-11c.n %0-7B%X
:tj^cond_imm_8_4".n" tjcond_disp is op_12_4=0x000c & cond_imm_8_4 & displacement_0_8 [ tjcond_disp = inst_next + 2 + displacement_0_8*2; ]
{
}

# tj%c.n %0-10B%x
:tj".n" tj_disp is op_11_5=0x0010 & displacement_0_11 [ tj_disp = inst_next + 2 + displacement_0_11*2; ]
{
}

# tjex%c %S%x
:tjex hi_reg_6_1_and_3_3 is op_7_9=0x000e & hi_reg_6_1_and_3_3
{
}

# tloadm%c %8-10r!, %M
:tloadm reg_8_3!, {} is op_11_5=0x001b & reg_8_3
{
}

# tloadr%10'b%c %0-2r, [%3-5r, %6-8r]
:tloadr^flag_10_1 reg_0_3, [reg_3_3, reg_6_3] is op_9_1=0x0000 & op_11_5=0x0003 & flag_10_1 & reg_0_3 & reg_3_3 & reg_6_3
{
}

# tloadr%c %0-2r, [%3-5r, #%6-10W]
:tloadr reg_0_3, [reg_3_3, #imm_6_5_x4] is op_11_5=0x000b & reg_0_3 & reg_3_3 & imm_6_5_x4
{
}

# tloadr%c %8-10r, [pc, #%0-7W]
:tloadr reg_8_3, [pc, #imm_0_8_x4] is op_11_5=0x0001 & reg_8_3 & pc & imm_0_8_x4
{
}

# tloadr%c %8-10r, [sp, #%0-7W]
:tloadr reg_8_3, [sp, #imm_0_8_x4] is op_11_5=0x0007 & reg_8_3 & sp & imm_0_8_x4
{
}

# tloadrb%c %0-2r, [%3-5r, #%6-10d]
:tloadrb reg_0_3, [reg_3_3, #imm_6_5] is op_11_5=0x0009 & reg_0_3 & reg_3_3 & imm_6_5
{
}

# tloadrh%c %0-2r, [%3-5r, #%6-10H]
:tloadrh reg_0_3, [reg_3_3, #imm_6_5_x2] is op_11_5=0x0005 & reg_0_3 & reg_3_3 & imm_6_5_x2
{
}

# tloadrh%c %0-2r, [%3-5r, %6-8r]
:tloadrh reg_0_3, [reg_3_3, reg_6_3] is op_9_7=0x000d & reg_0_3 & reg_3_3 & reg_6_3
{
}

# tloadrs%11?hb%c %0-2r, [%3-5r, %6-8r]
:tloadrs^flag_11_1 reg_0_3, [reg_3_3, reg_6_3] is op_9_2=0x0003 & op_12_4=0x0001 & flag_11_1 & reg_0_3 & reg_3_3 & reg_6_3
{
}

# tmcsr%c %0-2r
:tmcsr reg_0_3 is op_3_13=0x0d78 & reg_0_3
{
}

# tmov%C %8-10r, #%0-7d
:tmovs reg_8_3, #imm_0_8 is op_11_5=0x0014 & reg_8_3 & imm_0_8
{
}

# tmov%c %D, %S
:tmov hi_reg_7_1_and_0_3, hi_reg_6_1_and_3_3 is op_8_8=0x0006 & hi_reg_7_1_and_0_3 & hi_reg_6_1_and_3_3
{
}

# tmovn%C %0-2r, %3-5r
:tmovns reg_0_3, reg_3_3 is op_6_10=0x000f & reg_0_3 & reg_3_3
{
}

# tmrcs%c %0-2r
:tmrcs reg_0_3 is op_3_13=0x0d79 & reg_0_3
{
}

# tmrss%c %0-2r
:tmrss reg_0_3 is op_3_13=0x0d7b & reg_0_3
{
}

# tmssr%c %0-2r
:tmssr reg_0_3 is op_3_13=0x0d7a & reg_0_3
{
}

# tmul%C %0-2r, %3-5r
:tmuls reg_0_3, reg_3_3 is op_6_10=0x000d & reg_0_3 & reg_3_3
{
}

# tnand%c %0-2r, %3-5r
:tnand reg_0_3, reg_3_3 is op_6_10=0x0008 & reg_0_3 & reg_3_3
{
}

# tneg%C %0-2r, %3-5r
:tnegs reg_0_3, reg_3_3 is op_6_10=0x0009 & reg_0_3 & reg_3_3
{
}

# tnop%c
:tnop is op_0_16=0x46c0
{
}

# tor%C %0-2r, %3-5r
:tors reg_0_3, reg_3_3 is op_6_10=0x000c & reg_0_3 & reg_3_3
{
}

# tpop%c %O
:tpop {pc} is op_9_7=0x0036 & pc
{
}

# tpush%c %N
:tpush {lr} is op_9_7=0x0032 & lr
{
}

# treti %O
:treti {pc} is op_9_7=0x0034 & pc
{
}

# trotr%C %0-2r, %3-5r
:trotrs reg_0_3, reg_3_3 is op_6_10=0x0007 & reg_0_3 & reg_3_3
{
}

# tserv%c %0-7d
:tserv imm_0_8 is op_8_8=0x00cf & imm_0_8
{
}

# tshftl%C %0-2r, %3-5r
:tshftls reg_0_3, reg_3_3 is op_6_10=0x0002 & reg_0_3 & reg_3_3
{
}

# tshftl%C %0-2r, %3-5r, #%6-10d
:tshftls reg_0_3, reg_3_3, #imm_6_5 is op_11_5=0x001e & reg_0_3 & reg_3_3 & imm_6_5
{
}

# tshftr%C %0-2r, %3-5r
:tshftrs reg_0_3, reg_3_3 is op_6_10=0x0003 & reg_0_3 & reg_3_3
{
}

# tshftr%C %0-2r, %3-5r, %s
:tshftrs reg_0_3, reg_3_3, right_shift_imm_6_5 is op_11_5=0x001f & reg_0_3 & reg_3_3 & right_shift_imm_6_5
{
}

# tstorem%c %8-10r!, %M
:tstorem reg_8_3!, {} is op_11_5=0x001a & reg_8_3
{
}

# tstorer%10'b%c %0-2r, [%3-5r, %6-8r]
:tstorer^flag_10_1 reg_0_3, [reg_3_3, reg_6_3] is op_9_1=0x0000 & op_11_5=0x0002 & flag_10_1 & reg_0_3 & reg_3_3 & reg_6_3
{
}

# tstorer%c %0-2r, [%3-5r, #%6-10W]
:tstorer reg_0_3, [reg_3_3, #imm_6_5_x4] is op_11_5=0x000a & reg_0_3 & reg_3_3 & imm_6_5_x4
{
}

# tstorer%c %8-10r, [sp, #%0-7W]
:tstorer reg_8_3, [sp, #imm_0_8_x4] is op_11_5=0x0006 & reg_8_3 & sp & imm_0_8_x4
{
}

# tstorerb%c %0-2r, [%3-5r, #%6-10d]
:tstorerb reg_0_3, [reg_3_3, #imm_6_5] is op_11_5=0x0008 & reg_0_3 & reg_3_3 & imm_6_5
{
}

# tstorerh%c %0-2r, [%3-5r, #%6-10H]
:tstorerh reg_0_3, [reg_3_3, #imm_6_5_x2] is op_11_5=0x0004 & reg_0_3 & reg_3_3 & imm_6_5_x2
{
}

# tstorerh%c %0-2r, [%3-5r, %6-8r]
:tstorerh reg_0_3, [reg_3_3, reg_6_3] is op_9_7=0x0009 & reg_0_3 & reg_3_3 & reg_6_3
{
}

# tsub%C %0-2r, %3-5r, #%6-8d
:tsubs reg_0_3, reg_3_3, #imm_6_3 is op_9_7=0x0077 & reg_0_3 & reg_3_3 & imm_6_3
{
}

# tsub%C %0-2r, %3-5r, %6-8r
:tsubs reg_0_3, reg_3_3, reg_6_3 is op_9_7=0x0075 & reg_0_3 & reg_3_3 & reg_6_3
{
}

# tsub%C %8-10r, #%0-7d
:tsubs reg_8_3, #imm_0_8 is op_11_5=0x0017 & reg_8_3 & imm_0_8
{
}

# tsub%c sp, #%0-6W
:tsub sp, #imm_0_7_x4 is op_7_9=0x00c1 & sp & imm_0_7_x4
{
}

# tsubc%C %0-2r, %3-5r
:tsubcs reg_0_3, reg_3_3 is op_6_10=0x0006 & reg_0_3 & reg_3_3
{
}

# txor%C %0-2r, %3-5r
:txors reg_0_3, reg_3_3 is op_6_10=0x0001 & reg_0_3 & reg_3_3
{
}
